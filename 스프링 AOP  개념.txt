** 핵심 기능과 부가 기능
애플리케이션 로직은 크게 핵심 기능과 부가 기능으로 나눌 수 있다.
1."핵심 기능"은 해당 객체가 제공하는 고유의 기능이다. 예를 들어서 OrderService 의 핵심 기능은 주문 로직이다.
2."부가 기능"은 핵심 기능을 보조하기 위해 제공되는 기능이다. 예를 들어서 로그 추적 로직, 트랜잭션 기능이 있다.
  이러한 부가 기능은 단독으로 사용되지 않고, 핵심 기능과 함께 사용된다.
  예를 들어서 로그 추적 기능은 어떤 핵심 기능이 호출되었는지 로그를 남기기 위해 사용한다.
  그러니까 부가 기능은 이름 그대로 핵심 기능을 "보조"하기 위해 존재한다.

** 여러 곳에서 공통으로 사용하는 부가 기능
예를 들어서 모든 애플리케이션 호출을 로깅 해야 하는 요구사항 같은 "부가 기능"은 "횡단 관심사"(cross-cutting concerns)가 된다.

** 부가 기능 적용 문제
그런데 이런 부가 기능을 여러 곳에 적용하려면 너무 번거롭다.
부가 기능을 별도의 유틸리티 클래스로 만든다고 해도, 해당 유틸리티 클래스를 호출하는 코드가 결국 필요하다.
부가 기능이 구조적으로 단순 호출이 아니라 try~catch~finally 같은 구조가 필요하다면 더욱 복잡해진다.
더 큰 문제는 수정이다. 만약 부가 기능에 수정이 발생하면, 100개의 클래스 모두를 하나씩 찾아가면서 수정해야 한다.

** 부가 기능 적용 문제를 정리하면 다음과 같다.
    1.부가 기능을 적용할 때 아주 "많은 반복"이 필요하다.
    2.부가 기능이 여러 곳에 퍼져서 "중복 코드"를 만들어낸다.
    3.부가 기능을 "변경"할 때 중복 때문에 "많은 수정"이 필요하다.
    4.부가 기능의 적용 "대상을 변경할 때 많은 수정"이 필요하다.

- 소프트웨어 개발에서 변경 지점은 하나가 될 수 있도록 잘 모듈화 되어야 한다.
  그런데 부가 기능처럼 특정 로직을 애플리케이션 전반에 적용하는 문제는 일반적인 OOP 방식으로는 해결이 어렵다.

