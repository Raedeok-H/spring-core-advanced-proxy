대리자를 영어로 프록시(Proxy)라고한다.
프록시
    - 접근 제어, 캐싱(더 빠르게)
    - 부가기능 추가(의도한 기능보다 추가적인 기능 가능)
    - 프록시 체인(프록시가 또 다른 프록시에게 요청가능 -> 프록시에 요청하고 이후과정은 몰라도 됨)

객체에서 프록시가 되려면, 클라이언트는 서버에게 요청을 한 것인지, 프록시에게 요청을 한 것인지 조차 몰라야 한다.
    => 서버와 프록시는 같은 인터페이스를 사용해야 한다
    => 따라서 DI를 사용해서 대체 가능

프록시의 주요 기능 => 프록시를 통해서 할 수 있는 일은 크게 2가지로 구분할 수 있다.
1. 접근 제어
    - 권한에 따른 접근 차단
    - 캐싱
    - 지연 로딩
2. 부가 기능 추가
    - 원래 서버가 제공하는 기능에 더해서 부가 기능을 수행한다.
        예) 요청 값이나, 응답 값을 중간에 변형한다.
        예) 실행 시간을 측정해서 추가 로그를 남긴다.


   GOF 디자인 패턴
둘다 프록시를 사용하는 방법이지만 GOF 디자인 패턴에서는 이 둘을 의도(intent)에 따라서 프록시 패턴과 데코레이터 패턴으로 구분한다.
    - 프록시 패턴: 접근 제어가 목적
    - 데코레이터 패턴: 새로운 기능 추가가 목적