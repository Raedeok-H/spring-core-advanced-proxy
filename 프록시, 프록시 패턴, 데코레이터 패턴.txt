프록시 패턴은 이해했다.

요구사항 추가되었던 것 중 아래만 완료되었다
- 원본 코드를 전혀 수정하지 않고, 로그 추적기를 적용해라. ---------------------------------(완료)
- 특정 메서드는 로그를 출력하지 않는 기능               ---------------------------------(완료)
    - 보안상 일부는 로그를 출력하면 안된다.             ---------------------------------(완료)
- 다음과 같은 다양한 케이스에 적용할 수 있어야 한다.
    - v1 - 인터페이스가 있는 구현 클래스에 적용         ---------------------------------(완료)
    - v2 - 인터페이스가 없는 구체 클래스에 적용 >>>>>>>>미완!
    - v3 - 컴포넌트 스캔 대상에 기능 적용      >>>>>>>>미완!

프록시와 DI 덕분에 원본 코드를 전혀 수정하지 않고, 로그 추적기를 도입할 수 있었다.
물론 너무 많은 프록시 클래스를 만들어야 하는 단점이 있기는 하다. 이 부분은 나중에 해결하자

우선은 v2 - 인터페이스가 없는 구체 클래스에 프록시를 어떻게 적용할 수 있는지?

지금까지는 인터페이스를 기반으로 프록시를 도입했다.
그런데 자바의 다형성은 인터페이스를 구현하든, 아니면 클래스를 상속하든 상위 타입만 맞으면 다형성이 적용된다.
    => 인터페이스가 없어도 프록시를 만들수 있다는 뜻

** 자바 언어에서 다형성은 인터페이스나 클래스를 구분하지 않고 모두 적용된다.
** 해당 타입과 그 타입의 하위 타입은 모두 다형성의 대상이 된다.
** 인터페이스가 없어도 프록시가 가능하다는 것