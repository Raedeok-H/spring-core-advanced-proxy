**빈 후처리기 - BeanPostProcessor
- 스프링이 빈 저장소에 등록할 목적으로 생성한 객체를 빈 저장소에 등럭하기 직전에 조작하고 싶다면 빈 후처리기를 사용하면 된다.
빈 포스트 프로세서('BeanPostProcessor')는 번역하면 빈 후처리기인데, 이름 그대로 "빈을 생성한 후에" 무언가를 처리하는 용도로 사용한다.

"빈 후처리기 기능"
빈 후처리기의 기능은 막강하다.
객체를 조작할 수도 있고, 완전히 다른 객체로 바꿔치기 하는 것도 가능하다.

"빈 후처리기 과정"
1. 생성: 스프링 빈 대상이 되는 객체를 생성한다. ( @Bean , 컴포넌트 스캔 모두 포함) -(수동, 자동)
2. 전달: 생성된 객체를 "빈 저장소에 등록하기 직전"에 "빈 후처리기에 전달"한다.
3. 후 처리 작업: 빈 후처리기는 전달된 스프링 "빈 객체를 조작"하거나 다른 객체로 "바꿔치기" 할 수 있다.
4. 등록: 빈 후처리기는 빈을 반환한다. 전달 된 빈을 그대로 반환하면 해당 빈이 등록되고, 바꿔치기 하면 다른 객체가 빈 저장소에 등록된다.


**정리
  빈 후처리기는 빈을 조작하고 변경할 수 있는 "후킹 포인트"이다.
  이것은 빈 객체를 조작하거나 심지어 다른 객체로 바꾸어 버릴 수 있을 정도로 막강하다.
  여기서 조작이라는 것은 해당 객체의 특정 메서드를 호출하는 것을 뜻한다.
  일반적으로 스프링 컨테이너가 등록하는, 특히 컴포넌트 스캔의 대상이 되는 빈들은 중간에 조작할 방법이 없는데,
  빈 후처리기를 사용하면 개발자가 등록하는 모든 빈을 중간에 조작할 수 있다.
  이 말은 빈 객체를 "프록시로 교체하는 것"도 가능하다는 뜻이다.


실행해보면 스프링 부트가 기본으로 등록하는 수 많은 빈들이 빈 후처리기를 통과하는 것을 확인할 수 있다
모두 프록시를 적용하는 것은 올바르지 않다.
꼭 필요한 곳에만 프록시를 적용해야한다.
여기서는 basePackage 를 사용해서 v1~v3 애플리케이션 관련 빈들만 프록시 적용 대상이 되도록 했다.

**컴포넌트 스캔에도 적용
여기서 중요한 포인트는 v1, v2와 같이 수동으로 등록한 빈 뿐만 아니라 컴포넌트 스캔을 통해 등록한 v3 빈들도 프록
시를 적용할 수 있다는 점이다. 이것은 모두 빈 후처리기 덕분이다.

스프링 부트가 기본으로 제공하는 빈 중에는 프록시 객체를 만들 수 없는 빈들도 있다. 따라서 모든 객체를 프록시
로 만들 경우 오류가 발생한다.


** 빈 후처리기 - 정리
   이전에 보았던 문제들이 빈 후처리기를 통해서 어떻게 해결되었는지 정리
문제1 - 너무 많은 설정
문제2 - 컴포넌트 스캔 - 컴포넌트 스캔을 사용하는 경우 지금까지 학습한 방법으로는 프록시 적용이 불가능했다
                     프록시를 원본 객체 대신 스프링 컨테이너에 빈으로 등록해야 한다.
                     그런데 컴포넌트 스캔은 원본 객체를 스프링 빈으로 자동으로 등록하기 때문에 프록시 적용이 불가능하다.

문제 해결
빈 후처리기 덕분에 프록시를 생성하는 부분을 하나로 집중할 수 있다.(문제1)
그리고 컴포넌트 스캔처럼 스프링이 직접 대상을 빈으로 등록하는 경우에도 중간에 빈 등록 과정을 가로채서 원본 대신에 프록시를 스프링 빈으로 등록할 수 있다.(문제2)
덕분에 애플리케이션에 수 많은 스프링 빈이 추가되어도 프록시와 관련된 코드는 전혀 변경하지 않아도 된다.
그리고 컴포넌트 스캔을 사용해도 프록시가 모두 적용된다.



스프링은 프록시를 생성하기 위한 빈 후처리기를 이미 만들어서 제공한다.
**중요
프록시의 적용 대상 여부를 여기서는 간단히 패키지를 기준으로 설정했다.
그런데 잘 생각해보면 포인트컷을 사용하면 더 깔끔할 것 같다.
포인트컷은 이미 클래스, 메서드 단위의 필터 기능을 가지고 있기 때문에, 프록시 적용 대상 여부를 정밀하게 설정할 수 있다.
참고로 어드바이저는 포인트컷을 가지고 있다. 따라서 어드바이저를 통해 포인트컷을 확인할 수 있다.
뒤에서 학습하겠지만 스프링 AOP는 포인트컷을 사용해서 프록시 적용 대상 여부를 체크한다.

- 결과적으로 포인트컷은 다음 두 곳에 사용된다.
1. 프록시 적용 대상 여부를 체크해서 꼭 필요한 곳에만 프록시를 적용한다. (빈 후처리기 - 자동 프록시 생성)
2. 프록시의 어떤 메서드가 호출 되었을 때 어드바이스를 적용할 지 판단한다. (프록시 내부)