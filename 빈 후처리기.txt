**빈 후처리기 - BeanPostProcessor
- 스프링이 빈 저장소에 등록할 목적으로 생성한 객체를 빈 저장소에 등럭하기 직전에 조작하고 싶다면 빈 후처리기를 사용하면 된다.
빈 포스트 프로세서('BeanPostProcessor')는 번역하면 빈 후처리기인데, 이름 그대로 "빈을 생성한 후에" 무언가를 처리하는 용도로 사용한다.

"빈 후처리기 기능"
빈 후처리기의 기능은 막강하다.
객체를 조작할 수도 있고, 완전히 다른 객체로 바꿔치기 하는 것도 가능하다.

"빈 후처리기 과정"
1. 생성: 스프링 빈 대상이 되는 객체를 생성한다. ( @Bean , 컴포넌트 스캔 모두 포함) -(수동, 자동)
2. 전달: 생성된 객체를 "빈 저장소에 등록하기 직전"에 "빈 후처리기에 전달"한다.
3. 후 처리 작업: 빈 후처리기는 전달된 스프링 "빈 객체를 조작"하거나 다른 객체로 "바꿔치기" 할 수 있다.
4. 등록: 빈 후처리기는 빈을 반환한다. 전달 된 빈을 그대로 반환하면 해당 빈이 등록되고, 바꿔치기 하면 다른 객체가 빈 저장소에 등록된다.


**정리
  빈 후처리기는 빈을 조작하고 변경할 수 있는 "후킹 포인트"이다.
  이것은 빈 객체를 조작하거나 심지어 다른 객체로 바꾸어 버릴 수 있을 정도로 막강하다.
  여기서 조작이라는 것은 해당 객체의 특정 메서드를 호출하는 것을 뜻한다.
  일반적으로 스프링 컨테이너가 등록하는, 특히 컴포넌트 스캔의 대상이 되는 빈들은 중간에 조작할 방법이 없는데,
  빈 후처리기를 사용하면 개발자가 등록하는 모든 빈을 중간에 조작할 수 있다.
  이 말은 빈 객체를 "프록시로 교체하는 것"도 가능하다는 뜻이다.


실행해보면 스프링 부트가 기본으로 등록하는 수 많은 빈들이 빈 후처리기를 통과하는 것을 확인할 수 있다
모두 프록시를 적용하는 것은 올바르지 않다.
꼭 필요한 곳에만 프록시를 적용해야한다.
여기서는 basePackage 를 사용해서 v1~v3 애플리케이션 관련 빈들만 프록시 적용 대상이 되도록 했다.

**컴포넌트 스캔에도 적용
여기서 중요한 포인트는 v1, v2와 같이 수동으로 등록한 빈 뿐만 아니라 컴포넌트 스캔을 통해 등록한 v3 빈들도 프록
시를 적용할 수 있다는 점이다. 이것은 모두 빈 후처리기 덕분이다.

스프링 부트가 기본으로 제공하는 빈 중에는 프록시 객체를 만들 수 없는 빈들도 있다. 따라서 모든 객체를 프록시
로 만들 경우 오류가 발생한다.