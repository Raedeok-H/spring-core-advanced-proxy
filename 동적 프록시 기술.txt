JDK 동적 프록시 - 소개
지금까지 프록시를 적용하기 위해 적용 대상의 숫자 만큼 많은 프록시 클래스를 만들었다.
적용 대상이 100개면 프록시 클래스도 100개 만들었다.
그런데 앞서 살펴본 것과 같이 프록시 클래스의 기본 코드와 흐름은 거의 같고, 프록시를 어떤 대상에 적용하는가 정도만 차이가 있었다.
쉽게 이야기해서 프록시의 로직은 같은데, 적용 대상만 차이가 있는 것이다.

이 문제를 해결하는 것이 바로 동적 프록시 기술이다.
동적 프록시 기술을 사용하면 개발자가 직접 프록시 클래스를 만들지 않아도 된다.
이름 그대로 프록시 객체를 동적으로 런타임에 개발자 대신 만들어준다.
그리고 동적 프록시에 원하는 실행 로직을 지정할 수 있다

    JDK 동적 프록시 도입
예제를 보면 AImpl, BImpl 각각 프록시를 만들지 않았다.
프록시는 JDK 동적 프록시를 사용해서 동적으로 만들고 TimeInvocationHandler는 공통으로 사용했다.
JDK 동적 프록시 기술 덕분에 적용 대상만큼 프록시 객체를 만들지 않아도 된다.
같은 부가 기능 로직을 한번만 개발해서 공통으로 적용할 수 있다.
    => 결과적으로 프록시 클래스를 수 없이 만들어야 하는 문제도 해결하고, 부가 기능 로직도 하나의 클래스에 모아서 단일 책임 원칙(SRP)도 지켜진다.

개념 정리
1. JDK 동적 프록시가 자동으로 프록시를 만들어준다.
2. 프록시 로직은 InvocationHandler를 구현해서 직접 만들어준다.
    끝

JDK 동적 프록시는 인터페이스가 필수이다 => V1 애플리케이션에만 적용할 수 있다.

"메서드 이름 필터 기능 추가"
no-log를 호출했을 때는 요구사항에 맞게 로그가 남으면 안된다.
이런 문제를 해결하기 위해 메서드 이름을 기준으로 특정조건을 만족할 때만 로그를 남기는 기능을 개발해본다.

"JDK 동적 프록시 - 한계"
JDK 동적 프록시는 인터페이스가 필수이다.
그렇다면 V2 애플리케이션처럼 인터페이스 없이 클래스만 있는 경우에는 어떻게 동적 프록시를 적용할 수 있을까?
이것은 일반적인 방법을로는 어렵고 "DGLIB"라는 바이트코드를 조작하는 특별한 라이브러리를 사용해야 한다.

CGLIB - 소개
CGLIB: Code Generator Library
    - CGLIB는 바이트코드를 조작해서 동적으로 클래스를 생성하는 기술을 제공하는 라이브러리이다.
    - CGLIB를 사용하면 인터페이스가 없어도 구체 클래스만 가지고 동적 프록시를 만들어낼 수 있다.
    - CGLIB는 원래는 외부 라이브러리인데, 스프링 프레임워크가 스프링 내부 소스 코드에 포함했다.
        따라서 스프링을 사용한다면 별도의 외부 라이브러리를 추가하지 않아도 사용할 수 있다.

직접 CGLIB를 직접 사용하는 경우는 거의 없다.
    => 이후에 배울 스프링의 ProxyFactory라는 것이 이 기술을 편리하게 사용하게 도와주기 때문에,
        대략 개념을 익히면 된다.

먼저 예제만 생성했다.