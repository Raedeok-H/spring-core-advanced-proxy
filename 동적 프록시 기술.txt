JDK 동적 프록시 - 소개
지금까지 프록시를 적용하기 위해 적용 대상의 숫자 만큼 많은 프록시 클래스를 만들었다.
적용 대상이 100개면 프록시 클래스도 100개 만들었다.
그런데 앞서 살펴본 것과 같이 프록시 클래스의 기본 코드와 흐름은 거의 같고, 프록시를 어떤 대상에 적용하는가 정도만 차이가 있었다.
쉽게 이야기해서 프록시의 로직은 같은데, 적용 대상만 차이가 있는 것이다.

이 문제를 해결하는 것이 바로 동적 프록시 기술이다.
동적 프록시 기술을 사용하면 개발자가 직접 프록시 클래스를 만들지 않아도 된다.
이름 그대로 프록시 객체를 동적으로 런타임에 개발자 대신 만들어준다.
그리고 동적 프록시에 원하는 실행 로직을 지정할 수 있다

    JDK 동적 프록시 도입
예제를 보면 AImpl, BImpl 각각 프록시를 만들지 않았다.
프록시는 JDK 동적 프록시를 사용해서 동적으로 만들고 TimeInvocationHandler는 공통으로 사용했다.
JDK 동적 프록시 기술 덕분에 적용 대상만큼 프록시 객체를 만들지 않아도 된다.
같은 부가 기능 로직을 한번만 개발해서 공통으로 적용할 수 있다.
    => 결과적으로 프록시 클래스를 수 없이 만들어야 하는 문제도 해결하고, 부가 기능 로직도 하나의 클래스에 모아서 단일 책임 원칙(SRP)도 지켜진다.

개념 정리
1. JDK 동적 프록시가 자동으로 프록시를 만들어준다.
2. 프록시 로직은 InvocationHandler를 구현해서 직접 만들어준다.
    끝

JDK 동적 프록시는 인터페이스가 필수이다 => V1 애플리케이션에만 적용할 수 있다.

"메서드 이름 필터 기능 추가"
no-log를 호출했을 때는 요구사항에 맞게 로그가 남으면 안된다.
이런 문제를 해결하기 위해 메서드 이름을 기준으로 특정조건을 만족할 때만 로그를 남기는 기능을 개발해본다.

"JDK 동적 프록시 - 한계"
JDK 동적 프록시는 인터페이스가 필수이다.
그렇다면 V2 애플리케이션처럼 인터페이스 없이 클래스만 있는 경우에는 어떻게 동적 프록시를 적용할 수 있을까?
이것은 일반적인 방법을로는 어렵고 "DGLIB"라는 바이트코드를 조작하는 특별한 라이브러리를 사용해야 한다.

CGLIB - 소개
CGLIB: Code Generator Library
    - CGLIB는 바이트코드를 조작해서 동적으로 클래스를 생성하는 기술을 제공하는 라이브러리이다.
    - CGLIB를 사용하면 인터페이스가 없어도 구체 클래스만 가지고 동적 프록시를 만들어낼 수 있다.
    - CGLIB는 원래는 외부 라이브러리인데, 스프링 프레임워크가 스프링 내부 소스 코드에 포함했다.
        따라서 스프링을 사용한다면 별도의 외부 라이브러리를 추가하지 않아도 사용할 수 있다.

직접 CGLIB를 직접 사용하는 경우는 거의 없다.
    => 이후에 배울 스프링의 ProxyFactory라는 것이 이 기술을 편리하게 사용하게 도와주기 때문에,
        대략 개념을 익히면 된다.

JDK 동적 프록시에서 실행 로직을 위해 'InvocationHandler' 를 제공햇듯이,
CGLIB 는 'MethodInterceptor' 를 제공한다.

CGLIB 제약
클래스 기반 프록시는 상속을 사용하기 때문에 몇가지 제약이 있다.
    - 부모 클래스의 생성자를 체크해야 한다.                           -> CGLIB는 자식 클래스를 동적으로 생성하기 때문에 기본 생성자가 필요하다.
    - 클래스에 final 키워드가 붙으면 상속이 불가능하다.                -> CGLIB에서는 예외가 발생한다.
    - 메서드에 final 키워드가 붙으면 해당 메서드를 오버라이딩 할 수 없다. -> CGLIB에서는 프록시 로직이 동작하지 않는다.

CGLIB를 사용하면 인터페이스가 없는 V2 애플리케이션에 동적 프록시를 적용할 수 있다.
그런데 지금 당장 적용하기에는 몇가지 제약이 있다.
V2 애플리케이션에 기본 생성자를 추가하고, 의존관계를 setter 를 사용해서 주입하면 CGLIB를 적용할 수 있다.
하지만 다음에 학습하는 ProxyFactory 를 통해서 CGLIB를 적용하면 이런단점을 해결하고 또 더 편리하기 때문에,
애플리케이션에 CGLIB로 프록시를 적용하는 것은 조금 뒤에 알아보겠다.


** 남은 문제
   - 인터페이스가 있는 경우에는 JDK 동적 프록시를 적용하고, 그렇지 않은 경우에는 CGLIB를 적용하려면 어떻게해야할까?
   - 두 기술을 함께 사용할 때 부가 기능을 제공하기 위해서,
       JDK 동적 프록시가 제공하는 InvocationHandler와
       CGLIB가 제공하는 MethodInterceptor 를 각각 중복으로 만들어서 관리해야 할까?
   - 특정 조건에 맞을 때 프록시 로직을 적용하는 기능도 공통으로 제공되었으면?