JDK 동적 프록시 - 소개
지금까지 프록시를 적용하기 위해 적용 대상의 숫자 만큼 많은 프록시 클래스를 만들었다.
적용 대상이 100개면 프록시 클래스도 100개 만들었다.
그런데 앞서 살펴본 것과 같이 프록시 클래스의 기본 코드와 흐름은 거의 같고, 프록시를 어떤 대상에 적용하는가 정도만 차이가 있었다.
쉽게 이야기해서 프록시의 로직은 같은데, 적용 대상만 차이가 있는 것이다.

이 문제를 해결하는 것이 바로 동적 프록시 기술이다.
동적 프록시 기술을 사용하면 개발자가 직접 프록시 클래스를 만들지 않아도 된다.
이름 그대로 프록시 객체를 동적으로 런타임에 개발자 대신 만들어준다.
그리고 동적 프록시에 원하는 실행 로직을 지정할 수 있다

    JDK 동적 프록시 도입
예제를 보면 AImpl, BImpl 각각 프록시를 만들지 않았다.
프록시는 JDK 동적 프록시를 사용해서 동적으로 만들고 TimeInvocationHandler는 공통으로 사용했다.
JDK 동적 프록시 기술 덕분에 적용 대상만큼 프록시 객체를 만들지 않아도 된다.
같은 부가 기능 로직을 한번만 개발해서 공통으로 적용할 수 있다.
    => 결과적으로 프록시 클래스를 수 없이 만들어야 하는 문제도 해결하고, 부가 기능 로직도 하나의 클래스에 모아서 단일 책임 원칙(SRP)도 지켜진다.

개념 정리
1. JDK 동적 프록시가 자동으로 프록시를 만들어준다.
2. 프록시 로직은 InvocationHandler를 구현해서 직접 만들어준다.
    끝

JDK 동적 프록시는 인터페이스가 필수이다 => V1 애플리케이션에만 적용할 수 있다.