프록시 패턴은 이해했다.

요구사항 추가되었던 것 중 아래만 완료되었다
- 원본 코드를 전혀 수정하지 않고, 로그 추적기를 적용해라. ---------------------------------(완료)
- 특정 메서드는 로그를 출력하지 않는 기능               ---------------------------------(완료)
    - 보안상 일부는 로그를 출력하면 안된다.             ---------------------------------(완료)
- 다음과 같은 다양한 케이스에 적용할 수 있어야 한다.
    - v1 - 인터페이스가 있는 구현 클래스에 적용         ---------------------------------(완료)
    - v2 - 인터페이스가 없는 구체 클래스에 적용 >>>>>>>>미완!
    - v3 - 컴포넌트 스캔 대상에 기능 적용      >>>>>>>>미완!

프록시와 DI 덕분에 원본 코드를 전혀 수정하지 않고, 로그 추적기를 도입할 수 있었다.
물론 너무 많은 프록시 클래스를 만들어야 하는 단점이 있기는 하다. 이 부분은 나중에 해결하자

우선은 v2 - 인터페이스가 없는 구체 클래스에 프록시를 어떻게 적용할 수 있는지?

지금까지는 인터페이스를 기반으로 프록시를 도입했다.
그런데 자바의 다형성은 인터페이스를 구현하든, 아니면 클래스를 상속하든 상위 타입만 맞으면 다형성이 적용된다.
    => 인터페이스가 없어도 프록시를 만들수 있다는 뜻

** 자바 언어에서 다형성은 인터페이스나 클래스를 구분하지 않고 모두 적용된다.
** 해당 타입과 그 타입의 하위 타입은 모두 다형성의 대상이 된다.
** 인터페이스가 없어도 프록시가 가능하다는 것


인터페이스 기반 프록시 vs 클래스 기반 프록시
    - 인터페이스가 없어도 클래스 기반으로 프록시를 생성할 수 있다.
    - 클래스 기반 프록시는 해당 클래스에만 적용할 수 있다. 인터페이스 기반 프록시는 인터페이스만 같으면 모든 곳에 적용할 수 있다.
    - 클래스 기반 프록시는 상속을 사용하기 때문에 몇가지 제약이 있다.
        - 부모 클래스의 생성자를 호출해야 한다.(앞서 본 예제)
        - 클래스에 final 키워드가 붙으면 상속이 불가능하다.
        - 메서드에 final 키워드가 붙으면 해당 메서드를 오버라이딩 할 수 없다

Q. 뭐가 더 좋을까?
인터페이스 기반의 프록시는 상속이라는 제약에서 자유롭다.
프로그래밍 관점에서도 인터페이스를 사용하는 것이 역할과 구현을 명확하게 나누기 때문에 더 좋다.
인터페이스 기반 프록시의 단점은 인터페이스가 필요하다는 그 자체이다.

이론적으로는 모든 객체에 인터페이스를 도입해서 역할과 구현을 나누는 것이 좋다.
이렇게 하면 역할과 구현을 나누어서 구현체를 매우 편리하게 변경할 수 있다. 하지만 실제로는 구현을 거의 변경할 일이 없는 클래스도 많다.
인터페이스를 도입하는 것은 구현을 변경할 가능성이 있을 때 효과적인데,
구현을 변경할 가능성이 거의 없는 코드에 무작정 인터페이스를 사용하는 것은 번거롭고 그렇게 실용적이지 않다.
이런곳에는 실용적인 관점에서 인터페이스를 사용하지 않고 구체 클래스를 바로 사용하는 것이 좋다 생각한다.
    => 결론: - 인터페이스가 항상 필요하지는 않다는 것
            - 실무에서는 프록시를 적용할 때 V1처럼 인터페이스도 있고, V2처럼 구체 클래스도 있다.
              따라서 2가지 상황을 모두 대응할 수 있어야 한다.

    "너무 많은 프록시 클래스"
프록시 클래스를 하나만 만들어서 모든 곳에 적용하는 방법은 없을까?
다음에 설명할 동적 프록시 기술이 이 문제를 해결해준다.

현재 상태
- 원본 코드를 전혀 수정하지 않고, 로그 추적기를 적용해라. ---------------------------------(완료)
- 특정 메서드는 로그를 출력하지 않는 기능               ---------------------------------(완료)
    - 보안상 일부는 로그를 출력하면 안된다.             ---------------------------------(완료)
- 다음과 같은 다양한 케이스에 적용할 수 있어야 한다.
    - v1 - 인터페이스가 있는 구현 클래스에 적용         ---------------------------------(완료)
    - v2 - 인터페이스가 없는 구체 클래스에 적용         --------------------------------(완료)
    - v3 - 컴포넌트 스캔 대상에 기능 적용      >>>>>>>>미완!
